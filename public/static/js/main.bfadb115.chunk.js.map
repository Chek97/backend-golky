{"version":3,"sources":["components/WordList.js","types/types.js","actions/actions.js","components/SearchBar.js","hooks/useForm.js","reducers/wordReducer.js","reducers/rootReducer.js","store/store.js","Main.js","index.js"],"names":["WordList","words","useSelector","state","text","className","length","map","w","types","startGetText","search","dispatch","a","process","fetch","method","headers","resp","json","ok","getText","console","error","type","payload","SearchBar","useDispatch","useState","formValues","setFormValues","target","name","value","useForm","values","handleInputChange","handleSubmit","e","preventDefault","onSubmit","required","onChange","placeholder","initialState","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Main","ReactDOM","render","document","getElementById"],"mappings":"sOAIaA,EAAW,WAGpB,IAAQC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QAArCH,MAER,OACI,sBAAKI,UAAU,cAAf,UACI,8CACA,8BAGQJ,EAAMK,OAAS,GAEf,oBAAID,UAAU,oBAAd,SAGQJ,EAAMM,KAAI,SAAAC,GAAC,OACP,6BAAaA,GAAJA,cCpB5BC,EAEA,iBCCAC,EAAe,SAACC,GACzB,8CAAO,WAAMC,GAAN,mBAAAC,EAAA,4DAGaC,4BAHb,SAMgBC,MAAM,GAAD,OAHRD,4BAGQ,uBAA0BH,GAAU,CACxDK,OAAQ,MACRC,QAAS,CACL,eAAgB,sBATrB,cAMGC,EANH,gBAakBA,EAAKC,OAbvB,gBAaIf,EAbJ,EAaIA,KAGJc,EAAKE,GACJR,EAASS,EAAQjB,IAGjBkB,QAAQC,MAAM,mCApBf,2CAAP,uDA0BSF,EAAU,SAACjB,GAAD,MAAW,CAC9BoB,KAAMf,EACNgB,QAASrB,IC1BAsB,EAAY,WAErB,IAAMd,EAAWe,cAGjB,ECVmB,WAAiB,IAAhBxB,EAAe,uDAAP,GAE5B,EAAoCyB,mBAASzB,GAA7C,mBAAO0B,EAAP,KAAmBC,EAAnB,KASA,MAAO,CAACD,EAPkB,SAAC,GAAc,IAAbE,EAAY,EAAZA,OACxBD,EAAc,2BACPD,GADM,kBAERE,EAAOC,KAAOD,EAAOE,WDGMC,CAAQ,CACxCvB,OAAQ,KADZ,mBAAOwB,EAAP,KAAeC,EAAf,KAIOzB,EAAUwB,EAAVxB,OAGD0B,EAAY,uCAAG,WAAMC,GAAN,SAAAzB,EAAA,sDACjByB,EAAEC,iBAEF3B,EAASF,EAAaC,IAHL,2CAAH,sDAMlB,OACI,qCACI,qBAAKN,UAAU,uBAAf,SACI,uBAAMA,UAAU,0BAA0BmC,SAAUH,EAApD,UACI,uBACIhC,UAAU,uBACVmB,KAAK,OACLQ,KAAK,SACLC,MAAOtB,EACP8B,UAAQ,EACRC,SAAUN,EACVO,YAAY,sBACZ,aAAW,WAEf,wBAAQtC,UAAU,mBAAmBmB,KAAK,SAA1C,yBAGR,cAAC,EAAD,Q,eExCNoB,EAAe,CACjB3C,MAAO,ICAE4C,EAAcC,YAAgB,CACvC1C,KDEuB,WAAmC,IAAlCD,EAAiC,uDAAzByC,EAAcG,EAAW,uCACzD,OAAQA,EAAOvB,MACX,KAAKf,EACD,OAAO,2BACAN,GADP,IAEKF,MAAM,GAAD,mBAAME,EAAMF,OAAZ,CAAmB8C,EAAOtB,YAExC,QACI,OAAOtB,M,QEVb6C,EAAsC,qBAAXC,QAA0BA,OAAOC,sCAAyCC,IAE9FC,EAAQC,YACjBR,EACAG,EACIM,YAAgBC,OCHXC,G,MAAO,WAChB,OACI,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACI,cAAC,EAAD,QCJZK,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bfadb115.chunk.js","sourcesContent":["//IMPORTS\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const WordList = () => {\r\n\r\n    //get the word's list from redux state\r\n    const { words } = useSelector(state => state.text);\r\n\r\n    return (\r\n        <div className=\"custom-list\">\r\n            <h2>Resultados: </h2>\r\n            <div>\r\n                {\r\n                    /* list the words if they exists */\r\n                    words.length > 0\r\n                    &&\r\n                    <ul className=\"custom-list-words\">\r\n                        {\r\n                        /* List the words in the screen */\r\n                            words.map(w => (\r\n                                <li key={w}>{w}</li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","//type's object\r\nexport const types = {\r\n    startGetText: '[api] Start Get Text',\r\n    getText: '[api] Get Text'\r\n}","//IMPORTS\r\nimport { types } from '../types/types';\r\n\r\n//make request to the api in node\r\nexport const startGetText = (search) => {\r\n    return async(dispatch) => {\r\n\r\n        //enviroment variable to make request\r\n        const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n        //api request\r\n        const resp = await fetch(`${baseUrl}/iecho?text=${search}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        });\r\n        //response\r\n        const {text} = await resp.json();\r\n        \r\n        //if response is ok, call the reducer\r\n        if(resp.ok){\r\n            dispatch(getText(text));\r\n        }else{\r\n            \r\n            console.error('Error: no se envio ningun texto');\r\n        }\r\n    }\r\n}\r\n\r\n//make the action to the reducer with the answer from api\r\nexport const getText = (text) => ({\r\n    type: types.getText,\r\n    payload: text\r\n});","//IMPORTS\r\nimport React from 'react';\r\nimport { useForm } from '../hooks/useForm';\r\nimport { WordList } from './WordList';\r\nimport { useDispatch } from 'react-redux';\r\nimport { startGetText } from '../actions/actions';\r\n\r\nexport const SearchBar = () => {    \r\n    //dispatch\r\n    const dispatch = useDispatch();\r\n    \r\n    //state form\r\n    const [values, handleInputChange] = useForm({\r\n        search: ''\r\n    });\r\n    //desestructuring form-values\r\n    const {search} = values;\r\n\r\n    //submit event\r\n    const handleSubmit = async(e) => {\r\n        e.preventDefault();\r\n        //send the text word to make request\r\n        dispatch(startGetText(search));        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <nav className=\"navbar custom-navbar\">\r\n                <form className=\"form-inline custom-form\" onSubmit={handleSubmit}>\r\n                    <input \r\n                        className=\"form-control mr-sm-2\" \r\n                        type=\"text\"\r\n                        name=\"search\"\r\n                        value={search}\r\n                        required\r\n                        onChange={handleInputChange} \r\n                        placeholder=\"Ingresa una palabra\" \r\n                        aria-label=\"Search\" \r\n                    />\r\n                    <button className=\"btn my-2 my-sm-0\" type=\"submit\">Buscar</button>\r\n                </form>\r\n            </nav>\r\n            <WordList />\r\n        </>\r\n    )\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport const useForm = (state = {}) => {\r\n\r\n    const [formValues, setFormValues] = useState(state);\r\n\r\n    const handleInputChange = ({target}) => {\r\n        setFormValues({\r\n            ...formValues,\r\n            [target.name]: target.value\r\n        });\r\n    }\r\n\r\n    return [formValues, handleInputChange];\r\n}","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    words: []\r\n}\r\n\r\nexport const textReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.getText:\r\n            return {\r\n                ...state,\r\n                 words: [...state.words, action.payload]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport { textReducer } from './wordReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    text: textReducer,\r\n});","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport { rootReducer } from '../reducers/rootReducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    )\r\n);","import React from 'react'\r\nimport { Provider } from 'react-redux';\r\nimport { SearchBar } from './components/SearchBar'\r\nimport { store } from './store/store';\r\nimport './style.css';\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <SearchBar />\r\n        </Provider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Main } from './Main';\n\n\nReactDOM.render(\n  <Main />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}